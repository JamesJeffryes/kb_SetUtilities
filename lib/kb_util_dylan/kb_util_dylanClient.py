# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_util_dylan(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def KButil_Insert_SingleEndLibrary(self, params, context=None):
        """
        Method for Inserting a textarea field with FASTA or FASTQ into a SingleEndLibrary object and importing into SHOCK and WS
        :param params: instance of type
           "KButil_Insert_SingleEndLibrary_Params"
           (KButil_Insert_SingleEndLibrary Input Params) -> structure:
           parameter "workspace_name" of type "workspace_name" (** The
           workspace object refs are of form: ** **    objects =
           ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_sequence" of type "sequence", parameter
           "output_name" of type "data_obj_name"
        :returns: instance of type "KButil_Insert_SingleEndLibrary_Output"
           (KButil_Insert_SingleEndLibrary Output) -> structure: parameter
           "report_name" of type "data_obj_name", parameter "report_ref" of
           type "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_Insert_SingleEndLibrary',
            [params], self._service_ver, context)

    def KButil_FASTQ_to_FASTA(self, params, context=None):
        """
        Method for Converting a FASTQ SingleEndLibrary to a FASTA SingleEndLibrary
        :param params: instance of type "KButil_FASTQ_to_FASTA_Params"
           (KButil_FASTQ_to_FASTA Input Params) -> structure: parameter
           "workspace_name" of type "workspace_name" (** The workspace object
           refs are of form: ** **    objects = ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_name" of type "data_obj_name", parameter
           "output_name" of type "data_obj_name"
        :returns: instance of type "KButil_FASTQ_to_FASTA_Output"
           (KButil_FASTQ_to_FASTA Output) -> structure: parameter
           "report_name" of type "data_obj_name", parameter "report_ref" of
           type "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_FASTQ_to_FASTA',
            [params], self._service_ver, context)

    def KButil_Merge_FeatureSet_Collection(self, params, context=None):
        """
        Method for merging FeatureSets into a combined FeatureSet
        :param params: instance of type
           "KButil_Merge_FeatureSet_Collection_Params"
           (KButil_Merge_FeatureSet_Collection Input Params) -> structure:
           parameter "workspace_name" of type "workspace_name" (** The
           workspace object refs are of form: ** **    objects =
           ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_names" of type "data_obj_name", parameter
           "output_name" of type "data_obj_name", parameter "desc" of String
        :returns: instance of type
           "KButil_Merge_FeatureSet_Collection_Output"
           (KButil_Merge_FeatureSet_Collection Output) -> structure:
           parameter "report_name" of type "data_obj_name", parameter
           "report_ref" of type "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_Merge_FeatureSet_Collection',
            [params], self._service_ver, context)

    def KButil_Build_GenomeSet_from_FeatureSet(self, params, context=None):
        """
        Method for obtaining a GenomeSet from a FeatureSet
        :param params: instance of type
           "KButil_Build_GenomeSet_from_FeatureSet_Params"
           (KButil_Build_GenomeSet_from_FeatureSet Input Params) ->
           structure: parameter "workspace_name" of type "workspace_name" (**
           The workspace object refs are of form: ** **    objects =
           ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_name" of type "data_obj_name", parameter
           "output_name" of type "data_obj_name", parameter "desc" of String
        :returns: instance of type
           "KButil_Build_GenomeSet_from_FeatureSet_Output"
           (KButil_Build_GenomeSet_from_FeatureSet Output) -> structure:
           parameter "report_name" of type "data_obj_name", parameter
           "report_ref" of type "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_Build_GenomeSet_from_FeatureSet',
            [params], self._service_ver, context)

    def KButil_Add_Genome_to_GenomeSet(self, params, context=None):
        """
        Method for adding a Genome to a GenomeSet
        :param params: instance of type
           "KButil_Add_Genome_to_GenomeSet_Params"
           (KButil_Add_Genome_to_GenomeSet Input Params) -> structure:
           parameter "workspace_name" of type "workspace_name" (** The
           workspace object refs are of form: ** **    objects =
           ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_name" of type "data_obj_name", parameter
           "output_name" of type "data_obj_name", parameter "desc" of String
        :returns: instance of type "KButil_Add_Genome_to_GenomeSet_Output"
           (KButil_Add_Genome_to_GenomeSet Output) -> structure: parameter
           "report_name" of type "data_obj_name", parameter "report_ref" of
           type "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_Add_Genome_to_GenomeSet',
            [params], self._service_ver, context)

    def KButil_Concat_MSAs(self, params, context=None):
        """
        Method for Concatenating MSAs into a combined MSA
        :param params: instance of type "KButil_Concat_MSAs_Params"
           (KButil_Concat_MSAs Input Params) -> structure: parameter
           "workspace_name" of type "workspace_name" (** The workspace object
           refs are of form: ** **    objects = ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "input_names" of type "data_obj_name", parameter
           "output_name" of type "data_obj_name", parameter "desc" of String,
           parameter "blanks_flag" of Long
        :returns: instance of type "KButil_Concat_MSAs_Output"
           (KButil_Concat_MSAs Output) -> structure: parameter "report_name"
           of type "data_obj_name", parameter "report_ref" of type
           "data_obj_ref"
        """
        return self._client.call_method(
            'kb_util_dylan.KButil_Concat_MSAs',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_util_dylan.status',
            [], self._service_ver, context)
